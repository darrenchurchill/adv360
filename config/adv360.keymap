#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>


// Key Position definitions
#define KEYS_L   0  1  2  3  4  5  6 \
                14 15 16 17 18 19 20 \
                28 29 30 31 32 33 34 \
                46 47 48 49 50 51    \
                60 61 62 63 64

#define THUMBS_LEFT     35 36 \
                           52 \
                     65 66 67 \

#define KEYS_R   7  8  9 10 11 12 13 \
                21 22 23 24 25 26 27 \
                39 40 41 42 43 44 45 \
                   54 55 56 57 58 59 \
                      71 72 73 74 75

#define THUMBS_RIGHT 37 38    \
                     53       \
                     68 69 70 \


// Layer definitions
#define _QWERTY  0
#define _LOWER   1
#define _RAISE   2
// TODO: rename _MOD
#define _MOD     3


// Built-in Behavior tweaks
&mt {
  flavor = "balanced";
};
&sk {
  release-after-ms = <500>;
  // deactivate sticky key on next key press, instead of next key release
  quick-release;
};


/ {
    behaviors {
      #include "macros.dtsi"
      #include "version.dtsi"
      #ifndef VERSION_MACRO
      macro_ver: macro_ver {
        compatible = "zmk,behavior-macro";
        label = "macro_version";
        #binding-cells = <0>;
        bindings = <&kp RET>;
      };
      #endif

      #include "hold_tap.dtsi"
    };

    combos {
      compatible = "zmk,combos";
      // Both Hands
      combo_caps_word {
        timeout-ms = <70>;
        key-positions = <31 42>; // D & K
        bindings = <&caps_word>;
      };
      // Left Hand
      combo_esc {
        timeout-ms = <70>;
        key-positions = <31 32>; // D & F
        bindings = <&kp ESC>;
      };
      combo_slash {
        timeout-ms = <70>;
        key-positions = <32 33>; // F & G
        bindings = <&kp SLASH>;
      };
      combo_grave {
        timeout-ms = <70>;
        key-positions = <49 50>; // C & V
        bindings = <&kp GRAVE>;
      };

      // Right Hand
      combo_question {
        timeout-ms = <70>;
        key-positions = <40 41>; // H & J
        bindings = <&kp QUESTION>;
      };
      combo_enter {
        timeout-ms = <70>;
        key-positions = <41 42>; // J & K
        bindings = <&kp ENTER>;
      };
      combo_db_underscore {
        timeout-ms = <70>;
        key-positions = <41 42 43>; // J, K & L
        bindings = <&kp UNDERSCORE &kp UNDERSCORE>;
      };
      combo_underscore {
        timeout-ms = <70>;
        key-positions = <42 43>; // K & L
        bindings = <&kp UNDERSCORE>;
      };
      combo_db_minus {
        timeout-ms = <70>;
        key-positions = <55 56 57>; // M, COMMA & DOT
        bindings = <&kp MINUS &kp MINUS>;
      };
      combo_minus {
        timeout-ms = <70>;
        key-positions = <56 57>; // COMMA & DOT
        // NOTE: Binding the combo's hold behavior to trigger the same modifiers
        // as the home row mods for these key positions is the best ZMK allows
        // right now to mimic a tap-only QMK-type combo.
        // If you fill home row positions with more combos, it might be better
        // or easier to train yourself to roll onto the combos 1 at a time to
        // form the multi-modifier hold without triggering the combo.
        bindings = <&ht RS(RALT) MINUS>;
      };
    };

  keymap {
    compatible = "zmk,keymap";

    qwerty {
      bindings = <
        &kp EQUAL   &kp N7          &kp N8           &kp N9           &kp N0           &kp N5  &tog _LOWER                                                       &mo _MOD             &kp N6  &kp N1         &kp N2              &kp N3           &kp N4              &kp MINUS
        &kp TAB     &kp Q           &kp W            &kp E            &lh_lt _RAISE R  &kp T   &none                                                             &none                &kp Y   &kp U          &kp I               &kp O            &kp P               &kp BSLH
        &kp ESC     &lh_hm LCTRL A  &lh_lt _LOWER S  &lh_hm LSHFT D   &lh_hm LGUI F    &kp G   &none       &mt LCTRL DQT  &kp LALT   &kp LGUI   &mt RCTRL UNDER  &none                &kp H   &rh_hm RGUI J  &rh_hm RSHFT K      &rh_lt _LOWER L  &rh_hm RCTRL SEMI   &kp SQT
        &kp LSHFT   &lh_hm LCTRL Z  &lh_hm LALT X    &lh_hm LSHFT C   &kp V            &kp B                              &kp HOME   &kp PG_UP                                        &kp N   &kp M          &rh_hm RSHFT COMMA  &rh_hm RALT DOT  &rh_hm RCTRL SLASH  &kp RSHFT
        &mo _LOWER  &kp GRAVE       &kp CAPS         &kp LEFT         &kp RIGHT                &sk LSHIFT  &kp TAB        &kp END    &kp PG_DN  &kp BSPC         &rh_lt _RAISE SPACE          &kp DOWN       &kp UP              &kp LBKT         &kp RBKT            &mo _LOWER
      >;
    };

    lower {
      bindings = <
        &trans  &trans    &trans     &trans     &trans     &trans    &trans                                    &trans  &trans    &trans     &trans    &trans    &trans     &trans
        &trans  &trans    &trans     &kp LT     &kp GT     &trans    &trans                                    &trans  &trans    &trans     &kp LBKT  &kp RBKT  &trans     &trans
        &trans  &kp EXCL  &kp MINUS  &kp PLUS   &kp EQUAL  &kp HASH  &trans  &trans  &trans    &trans  &trans  &trans  &kp PIPE  &kp COLON  &kp LPAR  &kp RPAR  &kp PRCNT  &trans
        &trans  &kp BSLH  &kp SLASH  &kp ASTRK  &kp CARET  &kp AT                    &trans    &trans                  &kp AMPS  &kp DLLR   &kp LBRC  &kp RBRC  &trans     &trans
        &trans  &trans    &trans     &trans     &trans               &trans  &trans  &trans    &trans  &trans  &trans            &trans     &trans    &trans    &trans     &trans
      >;
    };

    raise {
      bindings = <
        &trans  &trans  &trans  &trans  &trans  &trans  &trans                                    &trans  &trans    &trans            &trans            &trans          &trans            &trans
        &trans  &trans  &trans  &trans  &trans  &trans  &trans                                    &trans  &kp HOME  &kp PG_DN         &kp PG_UP         &kp END         &kp LG(GRAVE)     &trans
        &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &kp LEFT  &kp DOWN          &kp UP            &kp RIGHT       &kp RC(GRAVE)     &trans
        &trans  &trans  &trans  &trans  &trans  &trans                  &trans    &trans                  &trans    &kp LS(LG(LBKT))  &kp LS(LG(RBKT))  &kp LC(LEFT)    &kp LC(RIGHT)     &trans
        &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans    &trans  &trans  &trans            &kp LC(PG_UP)     &kp LC(PG_DN)     &kp LC(LA(UP))  &kp LC(LA(DOWN))  &trans
      >;
    };

    mod {
      bindings = <
        &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &none                                                                     &trans                 &none        &none        &none        &none &none &none
        &none &none        &none        &none        &sys_reset   &none        &none                                                                     &none                  &none        &sys_reset   &none        &none &none &none
        &none &none        &none        &none        &none        &none        &none                   &none &none &bt BT_CLR &none                      &rgb_ug RGB_MEFS_CMD 5 &none        &none        &none        &none &none &none
        &none &none        &none        &none        &macro_ver   &bootloader                                      &none &none                                                  &bootloader  &none        &none        &none &none &none
        &none &none        &none        &none        &none                                       &none &none &none &none      &bl BL_TOG &rgb_ug RGB_TOG                                     &bl BL_INC   &bl BL_DEC   &none &none &none
      >;
    };
  };

  // template {
  //   bindings = <
  //     &trans  &trans  &trans  &trans  &trans  &trans  &trans                                    &trans  &trans  &trans  &trans  &trans  &trans  &trans
  //     &trans  &trans  &trans  &trans  &trans  &trans  &trans                                    &trans  &trans  &trans  &trans  &trans  &trans  &trans
  //     &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
  //     &trans  &trans  &trans  &trans  &trans  &trans                  &trans    &trans                  &trans  &trans  &trans  &trans  &trans  &trans
  //     &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans    &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
  //   >;
  // };
};
