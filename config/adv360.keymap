#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

#include "layers.dtsi"


// RGB Underglow command for the current battery level on each side
#define BAT_LVL &rgb_ug RGB_MEFS_CMD 5


// Built-in Behavior tweaks
&mt {
  flavor = "balanced";
};
&sk {
  release-after-ms = <500>;
  // deactivate sticky key on next key press, instead of next key release
  quick-release;
};


/ {
    behaviors {
      #include "macros.dtsi"
      #include "version.dtsi"
      #ifndef VERSION_MACRO
      macro_ver: macro_ver {
        compatible = "zmk,behavior-macro";
        label = "macro_version";
        #binding-cells = <0>;
        bindings = <&kp RET>;
      };
      #endif

      #include "hold_tap.dtsi"
    };

    combos {
      compatible = "zmk,combos";
      #include "combos.dtsi"
    };

  keymap {
    compatible = "zmk,keymap";

    qwerty {
      bindings = <
        /* LH */ &kp EQUAL   &kp N7          &kp N8           &kp N9           &kp N0           &kp N5  &tog _LOWER                           /* RH */                           &mo _ZMK             &kp N6  &kp N1         &kp N2              &kp N3           &kp N4              &kp MINUS
        /* LH */ &kp TAB     &kp Q           &kp W            &kp E            &lh_lt _RAISE R  &kp T   &none                                 /* RH */                           &none                &kp Y   &kp U          &kp I               &kp O            &kp P               &kp BSLH
        /* LH */ &kp ESC     &lh_hm LCTRL A  &lh_lt _LOWER S  &lh_hm LSHFT D   &lh_hm LGUI F    &kp G   &none        &mt LGUI DQT  &kp LCTRL  /* RH */  &kp RCTRL  &mt LGUI SQT  &none                &kp H   &rh_hm RGUI J  &rh_hm RSHFT K      &rh_lt _LOWER L  &rh_hm RCTRL SEMI   &kp SQT
        /* LH */ &kp LSHFT   &lh_hm LCTRL Z  &lh_hm LALT X    &lh_hm LSHFT C   &kp V            &kp B                              &kp HOME   /* RH */  &kp PG_UP                                     &kp N   &kp M          &rh_hm RSHFT COMMA  &rh_hm RALT DOT  &rh_hm RCTRL SLASH  &kp RSHFT
        /* LH */ &mo _LOWER  &kp GRAVE       &kp CAPS         &kp LEFT         &kp RIGHT                &key_repeat  &kp TAB       &kp END    /* RH */  &kp PG_DN  &kp BSPC      &rt_lt _RAISE SPACE          &kp DOWN       &kp UP              &kp LBKT         &kp RBKT            &mo _LOWER
      >;
    };

    lower {
      bindings = <
        /* LH */ &trans  &trans    &trans           &trans     &trans           &trans    &trans                  /* RH */                  &trans  &trans    &trans     &trans    &trans    &trans     &trans
        /* LH */ &trans  &trans    &trans           &kp LT     &kp GT           &trans    &trans                  /* RH */                  &trans  &trans    &trans     &kp LBKT  &kp RBKT  &trans     &trans
        /* LH */ &trans  &kp EXCL  &no_lshft MINUS  &kp PLUS   &no_lshft EQUAL  &kp HASH  &trans  &trans  &trans  /* RH */  &trans  &trans  &trans  &kp PIPE  &kp COLON  &kp LPAR  &kp RPAR  &kp PRCNT  &trans
        /* LH */ &trans  &kp BSLH  &no_lshft SLASH  &kp ASTRK  &kp CARET        &kp AT                    &trans  /* RH */  &trans                  &kp AMPS  &kp DLLR   &kp LBRC  &kp RBRC  &trans     &trans
        /* LH */ &trans  &trans    &trans           &trans     &trans                     &trans  &trans  &trans  /* RH */  &trans  &trans  &trans            &trans     &trans    &trans    &trans     &trans
      >;
    };

    raise {
      bindings = <
        /* LH */ &trans  &trans  &trans  &trans  &trans  &trans  &trans                  /* RH */                  &trans  &trans    &trans            &trans            &trans          &trans            &trans
        /* LH */ &trans  &trans  &trans  &trans  &trans  &trans  &trans                  /* RH */                  &trans  &kp HOME  &kp PG_DN         &kp PG_UP         &kp END         &kp LG(GRAVE)     &trans
        /* LH */ &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  /* RH */  &trans  &trans  &trans  &kp LEFT  &kp DOWN          &kp UP            &kp RIGHT       &kp RC(GRAVE)     &trans
        /* LH */ &trans  &trans  &trans  &trans  &trans  &trans                  &trans  /* RH */  &trans                  &trans    &kp LS(LG(LBKT))  &kp LS(LG(RBKT))  &kp LC(LEFT)    &kp LC(RIGHT)     &trans
        /* LH */ &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  /* RH */  &trans  &trans  &trans            &kp LC(PG_UP)     &kp LC(PG_DN)     &kp LC(LA(UP))  &kp LC(LA(DOWN))  &trans
      >;
    };

    zmk {
      bindings = <
        /* LH */ &none  &none        &none  &none       &bt BT_SEL 0  &none       &none                /* RH */                &none   &none    &bt BT_SEL 1     &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none
        /* LH */ &none  &bootloader  &none  &none       &sys_reset    &bl BL_TOG  &none                /* RH */                &none   &none    &sys_reset       &none         &none         &bootloader   &none
        /* LH */ &none  &none        &none  &none       &none         &none       &none  &none  &none  /* RH */  &none  &none  &none   &none    &bl BL_DEC       &bl BL_INC    &none         &none         &none
        /* LH */ &none  &none        &none  &bt BT_CLR  &macro_ver    BAT_LVL                   &none  /* RH */  &none                 &none    &rgb_ug RGB_TOG  &none         &none         &none         &none
        /* LH */ &none  &none        &none  &none       &none                     &none  &none  &none  /* RH */  &none  &none  &none            &none            &none         &none         &none         &none
      >;
    };
  };

  // template {
  //   bindings = <
  //     &trans  &trans  &trans  &trans  &trans  &trans  &trans                                    &trans  &trans  &trans  &trans  &trans  &trans  &trans
  //     &trans  &trans  &trans  &trans  &trans  &trans  &trans                                    &trans  &trans  &trans  &trans  &trans  &trans  &trans
  //     &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
  //     &trans  &trans  &trans  &trans  &trans  &trans                  &trans    &trans                  &trans  &trans  &trans  &trans  &trans  &trans
  //     &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans    &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
  //   >;
  // };
};
